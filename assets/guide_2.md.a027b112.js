import{_ as s,o as e,c as a,Q as n}from"./chunks/framework.ded7ccec.js";const E=JSON.parse('{"title":"Node.js打包工具","description":"","frontmatter":{},"headers":[],"relativePath":"guide/2.md","filePath":"guide/2.md","lastUpdated":1699958288000}'),l={name:"guide/2.md"},o=n('<h1 id="node-js打包工具" tabindex="-1">Node.js打包工具 <a class="header-anchor" href="#node-js打包工具" aria-label="Permalink to &quot;Node.js打包工具&quot;">​</a></h1><blockquote><p><a href="https://github.com/vercel/ncc" target="_blank" rel="noreferrer">https://github.com/vercel/ncc</a></p></blockquote><p>​ncc​​ 是一个简单的 CLI 工具，可以一键把一个 Node.js 项目编译打包成单个 JS 文件。</p><p>然后我们发布的 npm 包，package.json 里面的 dependencies 也不需要去加对应的依赖，npm安装的时候，也就不用去安装对应的依赖了。</p><p>这样的好处：</p><ol><li>将依赖包都固定在发包时刻的包里面的内容，其他包再发包，也不影响我们，因为我们最终发的是ncc的产物。</li><li>安装速度变快了，比如原来的模式xxx依赖A，B，C，A又可能引用别的包。最终可能安装一个包，实际安装了几十个包或者上百个包。现在只需要安装1个。</li><li>安装的结果是变少了，比如原来 node_modules 可能占用了50M，现在你可能只要安装 900KB 的东西，硬盘不会因为前端项目太多，导致node_modules大量占用空间了。</li><li>启动速度也能变快，因为原来xxx模块，会去引用A，B，C，都是需要走 require 的流程，这个过程就会耗费一些时间</li></ol><h2 id="安装" tabindex="-1">安装 <a class="header-anchor" href="#安装" aria-label="Permalink to &quot;安装&quot;">​</a></h2><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">npm</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">i</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-g</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">@vercel/ncc</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">npm</span><span style="color:#24292E;"> </span><span style="color:#032F62;">i</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-g</span><span style="color:#24292E;"> </span><span style="color:#032F62;">@vercel/ncc</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="使用" tabindex="-1">使用 <a class="header-anchor" href="#使用" aria-label="Permalink to &quot;使用&quot;">​</a></h2><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">ncc</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">build</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">src/index.js</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-o</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">dest/</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">ncc</span><span style="color:#24292E;"> </span><span style="color:#032F62;">build</span><span style="color:#24292E;"> </span><span style="color:#032F62;">src/index.js</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-o</span><span style="color:#24292E;"> </span><span style="color:#032F62;">dest/</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>ncc将我们的npm包，打包成一个JS文件。</p>',11),p=[o];function c(t,r,i,d,h,u){return e(),a("div",null,p)}const m=s(l,[["render",c]]);export{E as __pageData,m as default};
