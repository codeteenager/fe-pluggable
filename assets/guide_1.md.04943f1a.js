import{_ as s,o as n,c as a,Q as l}from"./chunks/framework.ded7ccec.js";const p="/fe-pluggable/images/1.png",o="/fe-pluggable/images/2.png",e="/fe-pluggable/images/3.png",t="/fe-pluggable/images/4.png",r="/fe-pluggable/images/5.png",c="/fe-pluggable/images/6.png",E="/fe-pluggable/images/7.png",i="/fe-pluggable/images/8.png",y="/fe-pluggable/images/9.png",u="/fe-pluggable/images/10.png",b="/fe-pluggable/images/11.png",m="/fe-pluggable/images/12.png",F="/fe-pluggable/images/13.png",f=JSON.parse('{"title":"微内核架构","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"guide/1.md","filePath":"guide/1.md","lastUpdated":1699958288000}'),d={name:"guide/1.md"},h=l('<h1 id="微内核架构" tabindex="-1">微内核架构 <a class="header-anchor" href="#微内核架构" aria-label="Permalink to &quot;微内核架构&quot;">​</a></h1><h2 id="微内核架构概述" tabindex="-1">微内核架构概述 <a class="header-anchor" href="#微内核架构概述" aria-label="Permalink to &quot;微内核架构概述&quot;">​</a></h2><p>什么是微内核架构？如果换一个名字，或许大家就很熟悉了，那就是插件系统。</p><p>我们实际工作生活中接触到的大型软件，大部分都拥有插件系统。</p><p>比如开发工具 vscode，拥有一个强大的插件系统，可以为 vscode 添加新的语法支持，新的主题，甚至添加 vscode 原本不支持的能力，通过社区贡献的2万多个插件，vscode 的能力变得所向披靡。</p><p>相较之下，没有插件系统的notepad之类的软件，功能就很单一，也没有任何扩展的可能性。</p><p>拥有强大的插件系统还有浏览器 chrome，前端的构建工具 webpack， rollup 等。几乎所有大型的软件，都拥有一个插件系统。</p><p>微内核架构中，软件的核心部分通常被称为微内核，或者宿主程序。微内核提供了一些标准接口和扩展点，允许插件以某种方式与其进行交互。插件则是独立的模块，可以独立开发并在宿主应用程序中加载和执行。</p><p>实际开发过程中，是不是一定要引入微内核架构呢，答案是否定的，具体需要结合软件系统诉求，看是否有对自身进行定制或者扩展的需求，是否能解决当前软件系统面临的问题。</p><h2 id="为什么需要微内核架构" tabindex="-1">为什么需要微内核架构 <a class="header-anchor" href="#为什么需要微内核架构" aria-label="Permalink to &quot;为什么需要微内核架构&quot;">​</a></h2><p>那微内核架构到底解决了什么软件问题？</p><p>主要体现在两个方面：</p><ul><li>对软件本身现有的能力进行定制化</li><li>为软件提供全新的能力</li></ul><p>这样的好处就在于，它提供了一套开放的接口，可以方便第三方来参与软件的定制和扩展，让大型软件的能力得以灵活的扩展。</p><p>其实微内核架构的实现并没有统一的标准，它的架构示意如下图所示：</p><p><img src="'+p+'" alt=""></p><p>微内核架构的核心代码保持逻辑单一，只负责程序的启动销毁，功能模块的加载，执行，卸载。软件的功能叠加由不同的插件来实现，并挂载到核心上实现功能的扩展。</p><p>这样允许软件的功能可以被动态地扩展和定制，在增强现有软件的功能或添加新功能的同时，无需修改核心程序代码。</p><p>可以看一下跟微内核完全相反的另一种架构设计：</p><p>把一个软件和它的各种功能都做在一起，内核功能与各个功能模块耦合在一起，如下图：</p><p><img src="'+o+'" alt=""></p><p>这种场景下，当我们需要定制某个功能时，我们需要直接修改软件的内核逻辑，显然不符合软件设计的开闭原则，不仅增加了软件开发的维护难度，同时也大大提升软件扩展的难度，从而使软件本身不具备有良好的扩展性。</p><p>如果将宏内核的架构改为微内核架构：</p><p><img src="'+e+'" alt=""></p><p>每个功能都成为插件，独立维护开发，不与内核耦合。每个插件需要定制，可以独立修改、发布，不影响其他插件及内核，同时也可以添加新的插件。相比宏内核，软件的维护难度大大降低，同时只要遵循插件的接口定义，就可以为软件开发新的功能，降低了软件扩展的难度。使得软件获得了很好的灵活性和扩展性。</p><p>总结下来，微内核架构有如下的优势：</p><ol><li>灵活性和可扩展性： 插件系统允许软件在运行时加载和卸载插件，从而实现灵活的功能扩展和定制化。通过插件，可以根据用户需求添加、移除或替换特定功能，而不需要修改核心代码，使得软件更易于扩展，易于适应变化的需求。</li><li>代码重用和模块化： 插件可以看作是独立的模块，它们可以在不同的应用中重复使用。这种模块化的设计使得代码更加可维护，减少了代码冗余，提高了代码重用率。</li><li>社区参与和共享： 插件系统鼓励社区的参与和贡献，第三方开发者可以开发自己的插件并与软件进行集成。这样，软件的功能得到了大大丰富，社区成员可以共享自己的扩展，促进了软件生态系统的发展。</li><li>解耦合和维护性： 插件系统帮助将软件的功能划分为独立的部分，降低了模块之间的耦合度。这使得软件更易于维护，当需要修改或升级某个功能时，只需关注相应的插件而不会影响整个系统。</li><li>性能和资源优化： 插件的动态加载和卸载使得软件可以根据需要来选择加载特定的功能，从而节约了内存和计算资源，提高了软件的性能。</li><li>定制化和个性化： 插件系统允许用户根据自己的需求来定制软件的功能和外观。用户可以选择安装和启用特定的插件，以满足个人喜好和工作流程。</li></ol><p>总体来说，微内核架构为软件提供了灵活性、可扩展性和定制化的能力，使得软件更加强大和适应性更强。它是构建功能丰富、易于维护和具有强大生态系统软件的关键要素之一。</p><h2 id="插件的实现方式" tabindex="-1">插件的实现方式 <a class="header-anchor" href="#插件的实现方式" aria-label="Permalink to &quot;插件的实现方式&quot;">​</a></h2><p>微内核架构尽管实现的方式不尽相同，但总的来说都包含下面几个步骤：</p><ol><li>定义插件接口： 首先，需要定义插件与主程序之间的接口，包括插件的初始化方法、执行方法、事件监听等。这样可以确保插件与主程序之间的交互是规范的。</li><li>插件的加载方式： 确定插件的加载形式，比如通过npm包，通过文件，通过 git 仓库等等，好的插件的组织形式使整个系统足够灵活。设计好插件的加载时机，比如惰性加载，按依赖加载等，好的加载时机把控，可以让大型系统的性能得到提升。</li><li>插件注册和管理： 主程序需要提供插件注册和管理的功能，用于管理已加载的插件列表。当插件加载完成后，将其注册到主程序中，这样主程序就可以调用插件的能力。</li><li>事件通信机制： 主程序和插件之间需要建立事件通信机制，以便在需要的时候进行交互。可以使用自定义事件、发布订阅模式或观察者模式等方式来实现事件的监听和触发。</li><li>插件配置： 可以为插件提供一些配置选项，使得插件的行为可以根据用户需求进行定制化。</li><li>安全性考虑： 插件系统涉及动态加载代码，因此安全性是一个重要考虑因素。确保只加载受信任的插件，并对插件的代码进行安全性检查，以防止潜在的恶意代码注入。</li></ol><p>业界关于插件设计模式有很多种，但是经过归纳总结，我们认为最常用的主要是以下三种插件模式：管道式、洋葱式和事件式，其中应用最为广泛的是事件式插件，以下也将分别从“特点”、“应用”两个方面介绍下这三种插件模式。</p><h3 id="管道式插件" tabindex="-1">管道式插件 <a class="header-anchor" href="#管道式插件" aria-label="Permalink to &quot;管道式插件&quot;">​</a></h3><p>管道式插件（Pipeline Plugin）是常用的插件设计模式之一。它的主要目标是将处理流程分解为一系列独立的步骤，并允许开发者通过插件来扩展或修改这些步骤，从而实现更灵活和可维护的代码。</p><p><img src="'+t+'" alt=""></p><p>如上图所示，在管道式插件中，处理流程被表示为一条管道，数据从管道的一端输入，经过一系列步骤进行处理，最终在管道的另一端输出。每个处理步骤都由一个插件来实现，该插件负责执行特定的任务，并将处理后的数据传递给下一个插件。</p><h4 id="优点" tabindex="-1">优点 <a class="header-anchor" href="#优点" aria-label="Permalink to &quot;优点&quot;">​</a></h4><ol><li>解耦性强，管道的每个环节之间相互独立，只处理特定的问题，可单独开发、测试和维护。</li><li>在输入输出标准化的情况，可以灵活组合插件，根据需求动态改变管道结构，实现数据处理流程的定制化和扩展性。</li><li>通过管道架构，可以方便进行数据缓存、异步处理和并发等优化，提高处理效率和系统性能。</li></ol><h4 id="缺点" tabindex="-1">缺点 <a class="header-anchor" href="#缺点" aria-label="Permalink to &quot;缺点&quot;">​</a></h4><ol><li>管道的设计需要考虑插件之间的数据密切性和执行顺序，可能会增加开发难度和设计复杂度</li><li>如果不合理的设计管道流程，可能会导致数据的不完整性和不准确性，对系统造成影响</li></ol><h4 id="应用" tabindex="-1">应用 <a class="header-anchor" href="#应用" aria-label="Permalink to &quot;应用&quot;">​</a></h4><p>管道式插件在许多领域都有应用，例如：</p><ul><li>数据处理管道：在数据处理中，可以使用管道式插件来处理数据的转换、过滤、验证等任务，确保数据在不同步骤中按照预期进行处理。</li><li>自动化任务执行：自动化构建、自动化部署等任务的执行，比如CI/CD流水线，再比如云服务部署</li><li>前端构建工具：在前端构建工具中，如Gulp，管道式插件被广泛用于处理和转换源代码，例如编译、压缩、合并文件等。</li></ul><p>以前端工具Gulp举例，以下是gulp的架构图：</p><p><img src="'+r+'" alt=""></p><p>综上，管道式插件是一种强大的设计模式，可以使代码更加灵活、可维护和可扩展，同时提供了一种模块化的方式来组织和处理复杂的任务。</p><h3 id="洋葱式插件" tabindex="-1">洋葱式插件 <a class="header-anchor" href="#洋葱式插件" aria-label="Permalink to &quot;洋葱式插件&quot;">​</a></h3><p>洋葱式插件（Onion Architecture Plugin）也是常用的一类插件设计模式，它是从洋葱架构（Onion Architecture）演化而来的。</p><p>洋葱架构是一种用于构建可维护、灵活且可测试的应用程序的软件架构模式。在洋葱架构中，应用程序的核心逻辑位于内部，而外部依赖（如数据库、UI等）则位于外部。洋葱架构通过层层包裹的方式来表示不同的关注点，类似于洋葱的结构，因此得名。</p><p><img src="'+c+'" alt=""></p><p>洋葱式插件将洋葱架构与插件系统相结合，以实现可插拔的、可扩展的应用程序。在这种模式下，插件可以被动态地加载和卸载，而不会影响应用程序的核心逻辑，从而使得应用程序更具灵活性和可维护性。</p><h4 id="优点-1" tabindex="-1">优点 <a class="header-anchor" href="#优点-1" aria-label="Permalink to &quot;优点&quot;">​</a></h4><ol><li>洋葱架构的层次分明， 洋葱式插件保留了洋葱架构的内部核心和外部依赖的层次结构。插件通常被视为外部依赖，而宿主应用程序的核心逻辑位于内部。</li><li>具备良好的重用性，洋葱架构中的各个层次和组件都可以独立地被重复利用，可以在不同的项目和场景中进行复用，提高了代码的可重用性。</li></ol><p>举例：比如KOA中很多中间件具备良好的复用性（如koa-session），多个项目均可以引入使用</p><ol><li>洋葱式插件允许插件在请求处理过程中先后执行，可以按需添加或删除插件，并且每个插件可以根据需要决定是否继续执行或终止执行，这使得洋葱式插件非常适合承当服务拦截器的角色</li><li>与管道式插件相比，洋葱式插件对数据干涉的时机更加完备，不仅仅可以对自身的数据输入环节进行干涉和处理，在数据输出环节还能对其他插件的输出进行干涉和处理</li></ol><h4 id="缺点-1" tabindex="-1">缺点 <a class="header-anchor" href="#缺点-1" aria-label="Permalink to &quot;缺点&quot;">​</a></h4><ol><li>相比管道式插件复杂性更高，洋葱式插件模式需要插件之间的协作和数据传递，即处理输入流和处理输出流，在处理复杂逻辑时可能导致代码变得复杂难以理解。</li><li>洋葱架构中的层次嵌套可能会增加函数调用的次数和层次，进而导致一定的性能损耗。</li></ol><h4 id="应用-1" tabindex="-1">应用 <a class="header-anchor" href="#应用-1" aria-label="Permalink to &quot;应用&quot;">​</a></h4><p>洋葱式插件模式在服务中间件中广泛应用：</p><p>洋葱式插件对数据流具备灵活和高权限的处理能力（能在输入输出两个环节来决定是否中断还是继续执行），非常符合服务中间件的使用场景</p><p>在前端领域，除了Koa、Express使用了洋葱式插件模式外，一些知名Nodejs框架也使用了洋葱式插件模式，比如Midway、Uni-request</p><p>以Koa为例，洋葱式插件运行阶段会经过3个环节：</p><p><img src="'+E+'" alt=""></p><ul><li>任务注册：Koa通过use方法进行任务注册</li><li>任务编排：任务编排分为前置处理、核心逻辑、后置处理器</li></ul><p><img src="'+i+'" alt=""></p><p><img src="'+y+'" alt=""></p><ul><li>任务调度：Koa中的任务调度由Koa-compose来统一负责</li></ul><p><img src="'+u+'" alt=""></p><p>以上是执行第一个中间件，触发dispatch(0)，第一个中间件执行next()后，就会触发dispatch(1)，进入第二个中间件，以此类推</p><h3 id="事件式插件" tabindex="-1">事件式插件 <a class="header-anchor" href="#事件式插件" aria-label="Permalink to &quot;事件式插件&quot;">​</a></h3><p>事件式插件（Event-based Plugin）是插件设计模式中最灵活的一种，它基于事件驱动编程。在事件式插件中，主程序（或宿主应用程序）通过触发事件来通知插件执行相应的操作。插件系统允许插件注册特定事件的监听器，并在相应事件被触发时执行相应的功能。</p><p><img src="'+b+'" alt=""></p><h4 id="优点-2" tabindex="-1">优点 <a class="header-anchor" href="#优点-2" aria-label="Permalink to &quot;优点&quot;">​</a></h4><ol><li>灵活度高，应用场景广</li></ol><p>运行方式多样，事件类型多，十分灵活，能适应于各种场景。</p><p>如webpack当中，其通过 Tapable 实现了一种发布订阅者模式的插件机制，提供同步/异步钩子，串行/并行钩子，按照执行类型分为瀑布/保险/循环钩子，并且可以进行灵活组合来满足webpack编译打包的所有功能扩展需求</p><p><img src="'+m+'" alt=""></p><ol start="2"><li>执行时机异步化，提升整体性能</li></ol><p>因为事件式插件是基于发布订阅实现的，执行的时机异步化，非阻塞式地执行代码，有利于提升整体的性能</p><p>vscode在插件系统中，应对几十个插件的应用，也不会有太大的性能问题，不仅仅是因为事件触发之后才会初始化插件，也是得益于事件式插件带有的益处。</p><ol start="3"><li>可插拔式的设计</li></ol><p>事件式插件还有一个重要的特点，可插拔式的设计，使插件在添加或删除的时候，都不会影响主流程的执行</p><p>如Chrome 浏览器支持使用事件式插件的方式来扩展其功能，但是不会影响原有的浏览器功能的执行。</p><h4 id="缺点-2" tabindex="-1">缺点 <a class="header-anchor" href="#缺点-2" aria-label="Permalink to &quot;缺点&quot;">​</a></h4><p>事件式插件虽然在插件注册和执行上具备非常大的灵活性，但是相应架构设计上会比管道式和洋葱式更为复杂，从而更容易引入未知问题。</p><p>事件式插件系统完全可以覆盖管道式插件系统的职能（使用串行的事件模式达到管道的效果），但是如果明确一个管道式的需求，则更建议使用管道式插件系统，因为管道式插件系统更为简单。</p><h4 id="应用-2" tabindex="-1">应用 <a class="header-anchor" href="#应用-2" aria-label="Permalink to &quot;应用&quot;">​</a></h4><p>事件式插件在前端领域有着广泛的应用，比如构建工具webpack，以及知名代码编辑器vscode，这里以vscode为例来讲述一下事件式插件的运行原理</p><p>这里主要研究客户端的插件系统运行流程，web端类似</p><p>整体的运行流程如下：</p><p><img src="'+F+`" alt=""></p><ol><li>初始化插件系统</li></ol><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;">vscode/src/vs/workbench/services/extensions/electron-sandbox/electronExtensionService.ts</span></span>
<span class="line"><span style="color:#6A737D;">*/</span></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">abstract</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ElectronExtensionService</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">AbstractExtensionService</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">implements</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">IExtensionService</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">	(</span></span>
<span class="line"><span style="color:#E1E4E8;">		@ILifecycleService </span><span style="color:#FFAB70;">lifecycleService</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ILifecycleService</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">	) {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#6A737D;">// 初始化插件系统服务</span></span>
<span class="line"><span style="color:#E1E4E8;">		lifecycleService.</span><span style="color:#B392F0;">when</span><span style="color:#E1E4E8;">(LifecyclePhase.Ready).</span><span style="color:#B392F0;">then</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">			</span><span style="color:#6A737D;">// reschedule to ensure this runs after restoring viewlets, panels, and editors</span></span>
<span class="line"><span style="color:#E1E4E8;">			</span><span style="color:#B392F0;">runWhenIdle</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">				</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">_initialize</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">			}, </span><span style="color:#79B8FF;">50</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">/*max delay*/</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">		});</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;">vscode/src/vs/workbench/services/extensions/electron-sandbox/electronExtensionService.ts</span></span>
<span class="line"><span style="color:#6A737D;">*/</span></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">abstract</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ElectronExtensionService</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">AbstractExtensionService</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">IExtensionService</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">	(</span></span>
<span class="line"><span style="color:#24292E;">		@ILifecycleService </span><span style="color:#E36209;">lifecycleService</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ILifecycleService</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">	) {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6A737D;">// 初始化插件系统服务</span></span>
<span class="line"><span style="color:#24292E;">		lifecycleService.</span><span style="color:#6F42C1;">when</span><span style="color:#24292E;">(LifecyclePhase.Ready).</span><span style="color:#6F42C1;">then</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#6A737D;">// reschedule to ensure this runs after restoring viewlets, panels, and editors</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#6F42C1;">runWhenIdle</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">				</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">_initialize</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">			}, </span><span style="color:#005CC5;">50</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">/*max delay*/</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">		});</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><p>在客户端插件服务初始化时，所有的service被设置之后，会将生命周期转为Ready阶段，然后进行服务的初始化</p><ol start="2"><li>扫描插件</li></ol><p>在插件系统初始化的时候，通过CachedExtensionScanner模块扫描已经安装的插件，主要是解析出以下信息：</p><ul><li>插件的名称</li><li>插件的版本</li><li>入口文件</li><li>与插件主流程相关的配置</li></ul><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">&quot;name&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;ts2plantuml&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">&quot;version&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;1.0.4&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">&quot;description&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">&quot;main&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;./out/extension.js&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">&quot;activationEvents&quot;</span><span style="color:#E1E4E8;">: [</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;onCommand:ts2plantuml.explorer.preview&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">  ],</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">&quot;contributes&quot;</span><span style="color:#E1E4E8;">: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;commands&quot;</span><span style="color:#E1E4E8;">: [</span></span>
<span class="line"><span style="color:#E1E4E8;">      {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&quot;command&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;ts2plantuml.explorer.preview&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&quot;title&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;Preview Class Diagram&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&quot;category&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;TS2PLANTUML&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">    ],</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;menus&quot;</span><span style="color:#E1E4E8;">: {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#9ECBFF;">&quot;explorer/context&quot;</span><span style="color:#E1E4E8;">: [</span></span>
<span class="line"><span style="color:#E1E4E8;">        {</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#9ECBFF;">&quot;command&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;ts2plantuml.explorer.preview&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#9ECBFF;">&quot;when&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;resourceLangId == typescript&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">      ],</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#9ECBFF;">&quot;commandPalette&quot;</span><span style="color:#E1E4E8;">: [</span></span>
<span class="line"><span style="color:#E1E4E8;">        {</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#9ECBFF;">&quot;command&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;ts2plantuml.explorer.preview&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#9ECBFF;">&quot;when&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;resourceLangId == typescript&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">      ]</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#032F62;">&quot;name&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;ts2plantuml&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#032F62;">&quot;version&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;1.0.4&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#032F62;">&quot;description&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#032F62;">&quot;main&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;./out/extension.js&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#032F62;">&quot;activationEvents&quot;</span><span style="color:#24292E;">: [</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;onCommand:ts2plantuml.explorer.preview&quot;</span></span>
<span class="line"><span style="color:#24292E;">  ],</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#032F62;">&quot;contributes&quot;</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;commands&quot;</span><span style="color:#24292E;">: [</span></span>
<span class="line"><span style="color:#24292E;">      {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&quot;command&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;ts2plantuml.explorer.preview&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&quot;title&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;Preview Class Diagram&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&quot;category&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;TS2PLANTUML&quot;</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">    ],</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;menus&quot;</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#032F62;">&quot;explorer/context&quot;</span><span style="color:#24292E;">: [</span></span>
<span class="line"><span style="color:#24292E;">        {</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#032F62;">&quot;command&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;ts2plantuml.explorer.preview&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#032F62;">&quot;when&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;resourceLangId == typescript&quot;</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">      ],</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#032F62;">&quot;commandPalette&quot;</span><span style="color:#24292E;">: [</span></span>
<span class="line"><span style="color:#24292E;">        {</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#032F62;">&quot;command&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;ts2plantuml.explorer.preview&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#032F62;">&quot;when&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;resourceLangId == typescript&quot;</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">      ]</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br></div></div><ol start="3"><li>注册插件</li></ol><p>根据上诉扫描出来的配置，通过ExtensionDescriptionRegistry模块，对插件进行注册，首先通过commands字段对指令进行注册，同时声明激活插件的事件，以及各操作路径可以触发的指令</p><ol start="4"><li>.监听激活事件</li></ol><p>通过监听激活事件，来激活插件，如上诉的配置中，当ts2plantuml.explorer.preview指令触发时，激活对应的插件</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// vscode/src/vs/workbench/api/common/extHostExtensionService.ts</span></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">abstract</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">AbstractExtHostExtensionService</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Disposable</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">implements</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ExtHostExtensionServiceShape</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">_startExtensionHost</span><span style="color:#E1E4E8;">()</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Promise</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">void</span><span style="color:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">._started) {</span></span>
<span class="line"><span style="color:#E1E4E8;">			</span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Error</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">\`Extension host is already started!\`</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">		}</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">._started </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">._readyToStartExtensionHost.</span><span style="color:#B392F0;">wait</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">			.</span><span style="color:#B392F0;">then</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">._readyToRunExtensions.</span><span style="color:#B392F0;">open</span><span style="color:#E1E4E8;">())</span></span>
<span class="line"><span style="color:#E1E4E8;">			</span><span style="color:#6A737D;">// 监听激活事件</span></span>
<span class="line"><span style="color:#E1E4E8;">			.</span><span style="color:#B392F0;">then</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">_handleEagerExtensions</span><span style="color:#E1E4E8;">())</span></span>
<span class="line"><span style="color:#E1E4E8;">			.</span><span style="color:#B392F0;">then</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">				</span><span style="color:#6A737D;">// 激活插件</span></span>
<span class="line"><span style="color:#E1E4E8;">				</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">._eagerExtensionsActivated.</span><span style="color:#B392F0;">open</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">				</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">._logService.</span><span style="color:#B392F0;">info</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">\`Eager extensions activated\`</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">			});</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// vscode/src/vs/workbench/api/common/extHostExtensionService.ts</span></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">abstract</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">AbstractExtHostExtensionService</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Disposable</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ExtHostExtensionServiceShape</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">_startExtensionHost</span><span style="color:#24292E;">()</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Promise</span><span style="color:#24292E;">&lt;</span><span style="color:#005CC5;">void</span><span style="color:#24292E;">&gt; {</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">._started) {</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Error</span><span style="color:#24292E;">(</span><span style="color:#032F62;">\`Extension host is already started!\`</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">._started </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">._readyToStartExtensionHost.</span><span style="color:#6F42C1;">wait</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">			.</span><span style="color:#6F42C1;">then</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">._readyToRunExtensions.</span><span style="color:#6F42C1;">open</span><span style="color:#24292E;">())</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#6A737D;">// 监听激活事件</span></span>
<span class="line"><span style="color:#24292E;">			.</span><span style="color:#6F42C1;">then</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">_handleEagerExtensions</span><span style="color:#24292E;">())</span></span>
<span class="line"><span style="color:#24292E;">			.</span><span style="color:#6F42C1;">then</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">				</span><span style="color:#6A737D;">// 激活插件</span></span>
<span class="line"><span style="color:#24292E;">				</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">._eagerExtensionsActivated.</span><span style="color:#6F42C1;">open</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">				</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">._logService.</span><span style="color:#6F42C1;">info</span><span style="color:#24292E;">(</span><span style="color:#032F62;">\`Eager extensions activated\`</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">			});</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><p>通过触发的激活事件，激活插件，同时将激活的事件做一个缓存，防止重复执行，这里即是监听激活事件里面的逻辑</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// vscode/src/vs/workbench/api/common/extHostExtensionActivator.ts</span></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ExtensionsActivator</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">implements</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">IDisposable</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">async</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">activateByEvent</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">activationEvent</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">string</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">startup</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">boolean</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Promise</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">void</span><span style="color:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">._alreadyActivatedEvents[activationEvent]) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">activateExtensions</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">._registry.</span><span style="color:#B392F0;">getExtensionDescriptionsForActivationEvent</span><span style="color:#E1E4E8;">(activationEvent);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">_activateExtensions</span><span style="color:#E1E4E8;">(activateExtensions.</span><span style="color:#B392F0;">map</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> ({</span></span>
<span class="line"><span style="color:#E1E4E8;">      id: e.identifier,</span></span>
<span class="line"><span style="color:#E1E4E8;">      reason: { startup, extensionId: e.identifier, activationEvent }</span></span>
<span class="line"><span style="color:#E1E4E8;">    })));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">._alreadyActivatedEvents[activationEvent] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// vscode/src/vs/workbench/api/common/extHostExtensionActivator.ts</span></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ExtensionsActivator</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">IDisposable</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">async</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">activateByEvent</span><span style="color:#24292E;">(</span><span style="color:#E36209;">activationEvent</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span><span style="color:#24292E;">, </span><span style="color:#E36209;">startup</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">boolean</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Promise</span><span style="color:#24292E;">&lt;</span><span style="color:#005CC5;">void</span><span style="color:#24292E;">&gt; {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">._alreadyActivatedEvents[activationEvent]) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">activateExtensions</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">._registry.</span><span style="color:#6F42C1;">getExtensionDescriptionsForActivationEvent</span><span style="color:#24292E;">(activationEvent);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">_activateExtensions</span><span style="color:#24292E;">(activateExtensions.</span><span style="color:#6F42C1;">map</span><span style="color:#24292E;">(</span><span style="color:#E36209;">e</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> ({</span></span>
<span class="line"><span style="color:#24292E;">      id: e.identifier,</span></span>
<span class="line"><span style="color:#24292E;">      reason: { startup, extensionId: e.identifier, activationEvent }</span></span>
<span class="line"><span style="color:#24292E;">    })));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">._alreadyActivatedEvents[activationEvent] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><ol start="5"><li>加载插件，并执行</li></ol><p>最后通过AbstractExtHostExtensionService模块加载插件，这里加载插件时，会对require进行拦截，对vscode进行代理，从而保证安全的执行环境，最后执行插件入口暴露出的activate函数进行激活插件</p>`,107),v=[h];function q(g,C,x,B,A,_){return n(),a("div",null,v)}const k=s(d,[["render",q]]);export{f as __pageData,k as default};
